import arvados
from _typeshed import Incomplete
from typing import Any, Callable, Container, Iterator, TypeVar

T = TypeVar('T')
HEX_RE: Incomplete
CR_UNCOMMITTED: str
CR_COMMITTED: str
CR_FINAL: str
keep_locator_pattern: Incomplete
signed_locator_pattern: Incomplete
portable_data_hash_pattern: Incomplete
manifest_pattern: Incomplete
keep_file_locator_pattern: Incomplete
keepuri_pattern: Incomplete
uuid_pattern: Incomplete
collection_uuid_pattern: Incomplete
container_uuid_pattern: Incomplete
group_uuid_pattern: Incomplete
link_uuid_pattern: Incomplete
user_uuid_pattern: Incomplete

def is_hex(s: str, *length_args: int) -> bool: ...
def keyset_list_all(fn: Callable[..., 'arvados.api_resources.ArvadosAPIRequest'], order_key: str = 'created_at', num_retries: int = 0, ascending: bool = True, key_fields: Container[str] = ('uuid',), **kwargs: Any) -> Iterator[dict[str, Any]]: ...
def iter_computed_permissions(fn: Callable[..., 'arvados.api_resources.ArvadosAPIRequest'], order_key: str = 'user_uuid', num_retries: int = 0, ascending: bool = True, key_fields: Container[str] = ('user_uuid', 'target_uuid'), **kwargs: Any) -> Iterator[dict[str, Any]]: ...
def ca_certs_path(fallback: T = ...) -> str | T: ...
def new_request_id() -> str: ...
def get_config_once(svc: arvados.api_resources.ArvadosAPIClient) -> dict[str, Any]: ...
def get_vocabulary_once(svc: arvados.api_resources.ArvadosAPIClient) -> dict[str, Any]: ...
def trim_name(collectionname: str) -> str: ...
