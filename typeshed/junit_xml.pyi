# Stubs for junit_xml (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

unichr = chr

def decode(var, encoding): ...

class TestSuite:
    name: Any = ...
    test_cases: Any = ...
    timestamp: Any = ...
    hostname: Any = ...
    id: Any = ...
    package: Any = ...
    file: Any = ...
    log: Any = ...
    url: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    properties: Any = ...
    def __init__(self, name, test_cases: Optional[Any] = ..., hostname: Optional[Any] = ..., id: Optional[Any] = ..., package: Optional[Any] = ..., timestamp: Optional[Any] = ..., properties: Optional[Any] = ..., file: Optional[Any] = ..., log: Optional[Any] = ..., url: Optional[Any] = ..., stdout: Optional[Any] = ..., stderr: Optional[Any] = ...) -> None: ...
    def build_xml_doc(self, encoding: Optional[Any] = ...): ...
    @staticmethod
    def to_xml_string(test_suites, prettyprint: bool = ..., encoding: Optional[Any] = ...): ...
    @staticmethod
    def to_file(file_descriptor, test_suites, prettyprint: bool = ..., encoding: Optional[Any] = ...): ...

class TestCase:
    name: Any = ...
    assertions: Any = ...
    elapsed_sec: Any = ...
    timestamp: Any = ...
    classname: Any = ...
    status: Any = ...
    category: Any = ...
    file: Any = ...
    line: Any = ...
    log: Any = ...
    url: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    is_enabled: bool = ...
    error_message: Any = ...
    error_output: Any = ...
    error_type: Any = ...
    failure_message: Any = ...
    failure_output: Any = ...
    failure_type: Any = ...
    skipped_message: Any = ...
    skipped_output: Any = ...
    def __init__(self, name, classname: Optional[Any] = ..., elapsed_sec: Optional[Any] = ..., stdout: Optional[Any] = ..., stderr: Optional[Any] = ..., assertions: Optional[Any] = ..., timestamp: Optional[Any] = ..., status: Optional[Any] = ..., category: Optional[Any] = ..., file: Optional[Any] = ..., line: Optional[Any] = ..., log: Optional[Any] = ..., group: Optional[Any] = ..., url: Optional[Any] = ...) -> None: ...
    def add_error_info(self, message: Optional[Any] = ..., output: Optional[Any] = ..., error_type: Optional[Any] = ...): ...
    def add_failure_info(self, message: Optional[Any] = ..., output: Optional[Any] = ..., failure_type: Optional[Any] = ...): ...
    def add_skipped_info(self, message: Optional[Any] = ..., output: Optional[Any] = ...): ...
    def is_failure(self): ...
    def is_error(self): ...
    def is_skipped(self): ...
